
// Note: This architecture is a subject to change.

// Parts of the engine in pseudo code

// The rendering pipeline. Handles individual rendering commands.
class Renderer
{
  void emit_command(/* ... */)
  {
    // Adds a new render command to the list
    /* ... */
  }

  void render()
  {
    for (cmd : commands)
    {
      graphics->set_this(cmd.this);
      graphics->set_that(cmd.that);

      cmd.material->shader->use();
      cmd.vbo->bind();
      // or actually:
      // graphics->bind(shader, vbo)
      // which binds VAO

      graphics->update_state(); // updates the relevant gpu state
      cmd.ibo.bind()
      cmd.ibo.draw_triangles();
    }
    commands.clear();
  }

  RenderCommandList commands;
};

// The render command looks something like this:
struct RenderCommand
{
  VertexBuffer vbo;
  IndexBuffer ibo;
  IndexRange range;
  Material material;
  Uniforms uniforms; // Or something..
};

Then there is for example MeshRenderer:

class MeshRenderer
{
  void render(Renderer *renderer)
  {
    // parent here points to the GameObject whose renderer this is.
    renderer->set_model_matrix(m_parent->get_world_matrix());

    for (submesh : m_mesh->submeshes())
      renderer->emit_command(submesh./* */)
  }
  Mesh *m_mesh;
}

// Now, who calls MeshRenderer::render() ?
// It would be something like SceneRenderer, who
// gets all the visible objects from the scene and
// then calls their renderer components render() method.

// Renders the scene.
class SceneRenderer
{
  void render(Renderer *renderer)
  {
    objects = m_scene->get_visible_objects();
    for (o : objects)
    {
      if (o->m_renderer)
        o->m_renderer->render(renderer);
    }
  }
}
